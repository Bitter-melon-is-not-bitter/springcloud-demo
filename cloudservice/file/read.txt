SpringCloud
    Eureka（服务注册与发现）
        1.Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移。
       服务注册于发现对于微服务架构来说是十分重要的，有了服务发现和注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了。
       功能类似于dubbo的注册中心，比如Zookeeper。

        2.Eureka采用C-S（客户端-服务端）的设计架构。Eureka Server作为服务注册功能的服务器，它是服务注册中心。

        3.而系统中的其他微服务，使用Eureka的Client（客户端）连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统
       中各个微服务是否正常运行。SpringCloud的一些其他模块（比如Zuul）就可以通过Eureka Server来发现系统中的其他微服务，并执行相关的逻辑。

        4.Eureka包含俩大组件：Eureka Server和Eureka Client。
       Eureka Server提供服务注册服务：各个节点启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务
       节点的信息可以在界面直观的看到。
       Eureka Client是一个客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、是轮询（round-robin）负载算法的负载均衡器。在应用启动后，将会
       像Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点
       移除（默认90秒）。

        5.Eureka的自我保护机制：某事某刻一个微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存。默认情况下，如果EurekaServer在一定时间内没有
       接收到某个微服务实例的心跳，EurekaServer将会注销实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka之间无法正常通信，以上行为可能变得非常危险了，
       因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题。当EurekaServer节点在短时间内丢失过多客户端时（可能发生了
       网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何
       微服务）。当网络故障恢复后，该EurekaServer节点会自动退出自我保护模式。在自我保护模式中，EurekaServer会保护服务注册表中的信息，不再注销任何服务实例。当
       它收到的心跳数重新恢复到阈值以上时，该EurekaServer节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务
       实例。一句话：好死不如赖活。自我保护模式是一种对应网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也
       不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。在SpringCloud中，可以使用eureka.server.enable-self-preservation=false
       禁用自我保护模式

        6.服务发现：@EnableDiscoveryClient//服务发现注解

        7.Eureka集群：
       集群：是指在不同的机器或者是服务器上配置相同的服务，对外做一个超大运算的整体
       Eureka集群：高可用。
       得修改映射配置（域名映射）：
       a.修改C:\Windows\System32\drivers\etc路径下的hosts文件 增加：
       127.0.0.1 eureka7001.com
       127.0.0.1 eureka7002.com
       127.0.0.1 eureka7003.com
      （就是同一个127.0.0.1有三个不同的别名）
       b.修改EurekaClient和EurekaServer的yml的集群配置
       c.集群遇到的问题，在7002端口启动后会报
       com.sun.jersey.api.client.ClientHandlerException: java.net.SocketTimeoutException: Read timed out的异常
       网上说明
       错误原因： 应用刚启动，需要通过ribbon从eureka上拉取服务；需要将虚拟主机名转化为ip地址
       解决办法： 这是比较正常的现象，只需要再次刷新就好了
       还有就是yml文件没有配置好会集群失败

        8.Eureka和Zookeeper的区别
       a.Eureka遵循AP原则，Zookeeper遵循CP原则
       b.分布式数据库中CAP原理（CAP+BASE）：
       传统的数据库ACID（A[Atomicity]：原子性，C[Consistency]：统一性，I[Isolation]：独立性，D[Durability]:持久性）
       分布式数据库CAP（C[Consistency]：强一致性或者统一性，A[Availability]：高可用性，P[Partition tolerance]：分区容错性）
       CAP理论的核心是：一个分布式系统不可能同学很好的满足一致性，可用性和分区容错性这三个需求
       因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类：
       CA-单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。
       CP-满足一致性，分区容忍性的系统，通常性能不是特别高。
       AP-满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。
       Eureka比Zookeeper好在哪：
       著名的CAP理论指出，一个分布式系统不可能同时满足C（一致性），A（高可用性）和P（分区容错性）由于分区容错性P在是分布式系统中必须
       要保证的，因此我们只能在A和C之间进行权衡，eureka保证AP，Zookeeper保证是CP


    Ribbon（负载均衡 客户端）
        1.SpringCloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡工具
       简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间服务连接在一起。Ribbon客户端
       组件是提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会
       自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。

        2.LB，即负载均衡（Load Balance），在微服务或分布式集群中经常用的一种应用。
       负载均衡简单的说就是将用户的请求平摊的分配到多个服务商，从而达到系统的HA（高可用）。
       常见的负载均衡软件有Nginx，LVS，硬件F5等。
       相应的中间件，例如：Dubbo和SpringCloud中均给我们提供了负载均衡，SpringCloud的负载均衡可以自定义。
       LB分为集中式LB和进程式LB：集中式的是偏硬件，进程式的偏软件
       集中式LB：即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如Nginx），由
       该设施复制把访问请求通过某种策略转发至服务的提供方
       进程内LB：将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适
       的服务器
       Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方面通过他来获取到服务提供方的地址
       Ribbon源码地址：https://github.com/Netflix/ribbon

        3.Ribbon（客户端）配置
       a.在pom里面添加Ribbon的坐标
       b.修改application.yml 追加eureka的服务注册地址
       c.对ConfigBean添加新注解@LoadBalanced 获得Rest时加入Ribbon的配置
       d.主启动类CloudConsumer添加@EnableEurekaClient
       e.修改DeptController_Consumer客户端访问类
       总结：Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所有需请求的客户端结合使用，和eureka结合只是其中一个实例，默认是轮询算法
       还有随机和根据响应时间加权的算法

        4.Ribbon核心组件IRule
       IRule里面有七种算法：
       a.RoundRobinRule：轮询
       b.RandomRule：随机
       c.AvailabilityFilteringRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问
       d.WeightedResponseTimeRule：根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高。刚启动时如果统计信息不足，则使用RoundRobinRule策略，等统计信息足够，会切换到WeightedResponseTimeRule
       e.RetryRule：先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务
       f.BestAvailableRule：先会过滤由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务
       g.ZoneAvoidanceRule：默认规则，复合判断server所在区域的性能和server的可用性选择服务器

        5.Ribbon自定义
       a.主启动类添加@RibbonClient注解：在启动该微服务的时候就能去加载我们的自定义Ribbon配置类，从而是配置生效，
       b.注意：这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，也就是说我们达不到特殊化定制的目的


    Feign（客户端）
        1.Feign是一个声明式WebService客户端。使用Feign能让编写WebService客户端更加简单，它的使用方法是定义一个接口，然后再上面添加
       注解，同时也支持JAX-RS标准的注解。Feign也支持可拨插式编码器和解码器。SpringCloud对Feign进行封装，使其支持了SpringMVC标准注解
       和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。

        2.Feign能干什么
       Feign旨在使编写Java Http客户端变得更容易。
       前面的Ribbon+RestTemplate时，利用RestTemplate对Http请求的封装处理，形成一套模版化的调用方法。但是在实际开发中，由于对服务依赖
       的调用可能不止一处，往往一个接口会被多出调用，所有通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign
       在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置
       它（以前是Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可），即可完成对服务提供方的接口绑定，简化了使用Srping
       Cloud Ribbon时，自动封装服务调用客户的开发量。

        3.Feign集成了Ribbon
       利用Ribbon维护了服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明
       式的方法，优雅而简单的实现了服务调用。

        4.Feign通过接口的方法调用Rest服务（之前是Ribbon+RestTemplate）
       该请求发送给Eureka服务器（http://CLOUDSERVICE-DEPT/dept/xxx），通过Feign直接找到服务接口，由于在进行服务调用的时候融合了
       Ribbon技术，所以也支持负载均衡作用。


    Hystrix（断路器 服务端）
        1.服务雪崩：多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”。
       如果扇出的链路上某个微服务的调用响应时间过长或者不可以，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，，所谓“雪崩
       效应”。
        对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒内饱和。比失败更糟糕的是，这些应用程序还可能导致
       服务之间的延迟增加，备份列队，阈值线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，
       以便单个依赖关系的失败，不能取消整个应用程序或系统。

        2.Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix
       能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。
        “熔断器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可
       处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地
       占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。

        3.服务熔断：熔断机制是应对雪崩效应的一种微服务链路保护机制。
       当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回“错误”的响应信息。当检测
       到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务调用的状况，当失败
       的调用到一定的阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand

        4.服务降级（客户端实现完成，与服务端没有关系）

        5.服务监控（豪猪HystrixDashboard）
       除了隔离依赖服务的调用外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求
       执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream
       项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。
       cloudservice-consumer-hystrix-dashboard
       http://localhost:xxxx/hystrix 官网
       http://localhost:xxxx/hystrix.stream hystrix监控对象日志
       在官网里面有7色1圈1线
       1圈代表：俩个含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色<黄色<橙色<红色递减。该圈除了颜色变化之外，它的大小也会
       根据实际的请求流量发生变化，流量越大该实心圆就越大。所有通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例。
       1线代表：用来记录2分钟内流量的相对变化，可以通它的观察到流量的上升和下降趋势。


    Zuul（路由网关）
        1. Zuul包含了对请求的路由和过滤俩个最主要的功能
       其中路由功能负责将外部请求转发到具体的微服务实例上，是实现访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现
       请求校验、服务聚合等功能的基础，Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他微服务的消
       息，也即以后的访问微服务都是通过Zuul跳转后获得。Zuul服务最终还是会注册进Eureka
       提供 = 代理 + 路由 + 过滤三大功能
       使用Zuul也得该hosts文件


    SpringCloud Config（分布式配置中心）
         1.SpringCloud Config为微服务框架中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心
        化的外部配置。

         2.SpringCloud Config分为客户端和服务端俩部分
            服务端:也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问
        接口。
            客户端：则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服
        务器默认采用git来存储配置信息，这样就有利于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。

         3.SpringCloud Config能干什么
        a.集中管理配置文件；
        b.不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release；
        c.运行期间动态调整配置，不在需要在每个服务部署的机器上编写配置文件，服务会向配置中心同一拉取自己的信息；
        d.当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置；
        e.将配置信息以REST接口的形式暴露。
        修改hosts文件 127.0.0.1		config-3344.com

         4.application.yml和bootstrap.yml
        application.yml是用户级的资源配置项，bootstrap.yml是系统级的，优先级更高
        SpringCloud会创建一个“Bootstrap Context”，作为Spring应用的“Application Context”的父上下文。初始化的时候，“Bootstrap
        Context”负责从外部源加载配置属性并解析配置。这俩个上下文共享一个从外部获取的“Environment”。“Bootstrap Context”属性有高
        优先级，默认情况下，它们不会被本地配置覆盖。“Bootstrap Context”和“Application Context”有着不同的约定
        所以新增一个“bootstrap.yml”文件，保证“Bootstrap Context”和“Application Context”配置的分离
        修改hosts文件 127.0.0.1		client-config.com

    总结：
      1.整套开发技术栈以SpringCloud为主，单个微服务模块以SpringMVC+SpringBoot/Spring+MyBatis组合进行开发；
      2.前端层，页面H5+thymeleaf/样式CSS3+BootStrap/前端框架JQuery+Node|Vue等；
      3.负载层，前端访问通过Http或者Https协议到达服务端的LB，可以是F5等硬件做负载均衡，还可以自行部署LVS+Keepalived等（前期量小可用Nginx）；
      4.网关层，请求通过LB后，会到达整个微服务体系的网关层Zuul（Gateway），内嵌Ribbon做客户端负载均衡，Hystrix做熔断降级等；
      5.服务注册，采用Eureka来做服务治理，Zuul会从Eureka集群获取已发布的微服务访问地址，然后根据配置把请求代理带相应的微服务去；
      6.docker容器，所有的微服务模块都部署在Docker容器里面，而且前后端的服务完全分开，各自独立部署后前端微服务调用后端微服务，后端微服务之间会有相互调用；
      7.统一配置，每个微服务模块会跟到Eureka集群、配置中心（SpringCloudConfig）等进行交互；
      8.第三方框架，每个微服务模块根据实现的需要，通常还需要使用一些第三方框架，比如常见的有：缓存服务（Redis）、图片服务（FastDFS）、搜索服务（ElasticSearch）、安全管理（Shiro）等等；
      9.Mysql数据库，可以按照微服务模块进行拆分、统一访问公共库或者单独自己库，可以单独构建MySQL集群或者分库分表MyCat等。

      其他需要学习
      SpringCloud Stream：数据流操作开发包；
      SpringCloud Turbine：聚合服务器发送事件流数据的一个工具，用来监控集群下Hystrix的metrics情况；
      SpringCloud Task：提供云端计划任务管理、任务调度；
      SpringCloud Bus:消息总线；
      SpringCloud Sleuth：日志收集工具包实现了一种分布式追踪解决方案，封装了Dapper和log-based追踪以及Zipkin和HTrace操作；
      SpringCloud Security：基于spring security的安全工具包，为应用程序添加安全监控；
      服务部署：Kubernetes，OpenStack；
      全链路追踪：Zipkin，brave；
      服务监控：zabbix；
      SpringCloud CLI：基于SpringBoot CLI，可以让你以命令方式快速建立云组件；
      全局控制：选举leader、全局锁、全局唯一id；
      安全鉴权：auth2、openid connect；
      自动化构建与部署：gitlab+jenkins+docker。




























